import cx_Oracle
import mybatis_mapper2sql
from mylog import MyLog

class MyDaoBnotice:
    def __init__(self):
        self.conn = cx_Oracle.connect('team5/java@192.168.41.5:1521/xe')
        self.cs = self.conn.cursor()
        self.mapper = mybatis_mapper2sql.create_mapper(xml='mybatis_bnotice.xml')[0]
        
    def bnotice_select_list(self,):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "select_list")
        MyLog().getLogger().debug(sql)
        rs = self.cs.execute(sql,)
        list = []
        for record in rs:
            list.append({'bnotice_seq':record[0],'bnotice_title':record[1],'bnotice_content':record[2],'bnotice_filename':record[3],
                         'bnotice_filepath':record[4],'bnotice_hit':record[5], 'in_date':record[6], 'in_user_id':record[7], 'up_date':[8]})
        return list
    
    def bnotice_select(self, bnotice_seq):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "select")
        MyLog().getLogger().debug(sql)
        rs = self.cs.execute(sql, (bnotice_seq,) )
        obj = None
        for record in rs:
            obj = {'bnotice_seq':record[0],'bnotice_title':record[1],'bnotice_content':record[2],'bnotice_filename':record[3],
                   'bnotice_filepath':record[4],'bnotice_hit':record[5], 'in_date':record[6], 'in_user_id':record[7], 'up_date':[8],'display_yn':record[9]}
        return obj
    
#     def select_list_admin(self,):
#         sql = mybatis_mapper2sql.get_child_statement(self.mapper, "select_list_admin")
#         MyLog().getLogger().debug(sql)
#         rs = self.cs.execute(sql,)
#         list = []
#         for record in rs:
#             list.append({'bnotice_seq':record[0],'bnotice_title':record[1],'bnotice_content':record[2],'bnotice_filename':record[3],
#                          'bnotice_filepath':record[4],'bnotice_hit':record[5], 'in_date':record[6], 'in_user_id':record[7], 'up_date':[8]})
#         return list
        
    def bnotice_insert(self, bnotice_title, bnotice_content, bnotice_filename, bnotice_filepath, bnotice_hit, in_user_id, display_yn):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "insert")
        MyLog().getLogger().debug(sql)
        self.cs.execute(sql, (bnotice_title, bnotice_content, bnotice_filename, bnotice_filepath, bnotice_hit, in_user_id, display_yn))
        self.conn.commit()
        cnt = self.cs.rowcount
        return cnt

        
    def bnotice_update(self,bnotice_seq, bnotice_title, bnotice_content, bnotice_filename, bnotice_filepath):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "update")        
        MyLog().getLogger().debug(sql)
        self.cs.execute(sql, (bnotice_title, bnotice_content, bnotice_filename, bnotice_filepath, bnotice_seq))
        self.conn.commit()
        cnt = self.cs.rowcount
        return cnt
    
    def bnotice_hit(self,bnotice_hit):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "hits")        
        MyLog().getLogger().debug(sql)
        self.cs.execute(sql, (bnotice_hit,))
        self.conn.commit()
        cnt = self.cs.rowcount
        return cnt
    
    def bnotice_del_img(self,bnotice_seq, up_user_id):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "del_img")  
        MyLog().getLogger().debug(sql)
        self.cs.execute(sql, (up_user_id, bnotice_seq))
        self.conn.commit()
        cnt = self.cs.rowcount
        return cnt
    
    
    def notice_delete(self,bnotice_seq):
        sql = mybatis_mapper2sql.get_child_statement(self.mapper, "delete")  
        MyLog().getLogger().debug(sql)
        self.cs.execute(sql, (bnotice_seq,))
        self.conn.commit()
        cnt = self.cs.rowcount
        return cnt
        
        
if __name__ == "__main__":
    dao = MyDaoBnotice()
#     cnt = dao.bnotice_select(1)
#     print(cnt)

    
    
    